// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/filecategorytype"
	"github.com/facebookincubator/symphony/pkg/ent/locationtype"
)

// FileCategoryTypeCreate is the builder for creating a FileCategoryType entity.
type FileCategoryTypeCreate struct {
	config
	mutation *FileCategoryTypeMutation
	hooks    []Hook
}

// SetCreateTime sets the create_time field.
func (fctc *FileCategoryTypeCreate) SetCreateTime(t time.Time) *FileCategoryTypeCreate {
	fctc.mutation.SetCreateTime(t)
	return fctc
}

// SetNillableCreateTime sets the create_time field if the given value is not nil.
func (fctc *FileCategoryTypeCreate) SetNillableCreateTime(t *time.Time) *FileCategoryTypeCreate {
	if t != nil {
		fctc.SetCreateTime(*t)
	}
	return fctc
}

// SetUpdateTime sets the update_time field.
func (fctc *FileCategoryTypeCreate) SetUpdateTime(t time.Time) *FileCategoryTypeCreate {
	fctc.mutation.SetUpdateTime(t)
	return fctc
}

// SetNillableUpdateTime sets the update_time field if the given value is not nil.
func (fctc *FileCategoryTypeCreate) SetNillableUpdateTime(t *time.Time) *FileCategoryTypeCreate {
	if t != nil {
		fctc.SetUpdateTime(*t)
	}
	return fctc
}

// SetName sets the name field.
func (fctc *FileCategoryTypeCreate) SetName(s string) *FileCategoryTypeCreate {
	fctc.mutation.SetName(s)
	return fctc
}

// SetLocationTypeID sets the location_type edge to LocationType by id.
func (fctc *FileCategoryTypeCreate) SetLocationTypeID(id int) *FileCategoryTypeCreate {
	fctc.mutation.SetLocationTypeID(id)
	return fctc
}

// SetNillableLocationTypeID sets the location_type edge to LocationType by id if the given value is not nil.
func (fctc *FileCategoryTypeCreate) SetNillableLocationTypeID(id *int) *FileCategoryTypeCreate {
	if id != nil {
		fctc = fctc.SetLocationTypeID(*id)
	}
	return fctc
}

// SetLocationType sets the location_type edge to LocationType.
func (fctc *FileCategoryTypeCreate) SetLocationType(l *LocationType) *FileCategoryTypeCreate {
	return fctc.SetLocationTypeID(l.ID)
}

// Mutation returns the FileCategoryTypeMutation object of the builder.
func (fctc *FileCategoryTypeCreate) Mutation() *FileCategoryTypeMutation {
	return fctc.mutation
}

// Save creates the FileCategoryType in the database.
func (fctc *FileCategoryTypeCreate) Save(ctx context.Context) (*FileCategoryType, error) {
	var (
		err  error
		node *FileCategoryType
	)
	fctc.defaults()
	if len(fctc.hooks) == 0 {
		if err = fctc.check(); err != nil {
			return nil, err
		}
		node, err = fctc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FileCategoryTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fctc.check(); err != nil {
				return nil, err
			}
			fctc.mutation = mutation
			node, err = fctc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fctc.hooks) - 1; i >= 0; i-- {
			mut = fctc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fctc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fctc *FileCategoryTypeCreate) SaveX(ctx context.Context) *FileCategoryType {
	v, err := fctc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (fctc *FileCategoryTypeCreate) defaults() {
	if _, ok := fctc.mutation.CreateTime(); !ok {
		v := filecategorytype.DefaultCreateTime()
		fctc.mutation.SetCreateTime(v)
	}
	if _, ok := fctc.mutation.UpdateTime(); !ok {
		v := filecategorytype.DefaultUpdateTime()
		fctc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fctc *FileCategoryTypeCreate) check() error {
	if _, ok := fctc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := fctc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if _, ok := fctc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	return nil
}

func (fctc *FileCategoryTypeCreate) sqlSave(ctx context.Context) (*FileCategoryType, error) {
	_node, _spec := fctc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fctc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (fctc *FileCategoryTypeCreate) createSpec() (*FileCategoryType, *sqlgraph.CreateSpec) {
	var (
		_node = &FileCategoryType{config: fctc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: filecategorytype.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: filecategorytype.FieldID,
			},
		}
	)
	if value, ok := fctc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: filecategorytype.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := fctc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: filecategorytype.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := fctc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: filecategorytype.FieldName,
		})
		_node.Name = value
	}
	if nodes := fctc.mutation.LocationTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filecategorytype.LocationTypeTable,
			Columns: []string{filecategorytype.LocationTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: locationtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FileCategoryTypeCreateBulk is the builder for creating a bulk of FileCategoryType entities.
type FileCategoryTypeCreateBulk struct {
	config
	builders []*FileCategoryTypeCreate
}

// Save creates the FileCategoryType entities in the database.
func (fctcb *FileCategoryTypeCreateBulk) Save(ctx context.Context) ([]*FileCategoryType, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fctcb.builders))
	nodes := make([]*FileCategoryType, len(fctcb.builders))
	mutators := make([]Mutator, len(fctcb.builders))
	for i := range fctcb.builders {
		func(i int, root context.Context) {
			builder := fctcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FileCategoryTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fctcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fctcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fctcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (fctcb *FileCategoryTypeCreateBulk) SaveX(ctx context.Context) []*FileCategoryType {
	v, err := fctcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
