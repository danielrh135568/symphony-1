// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/filecategorytype"
	"github.com/facebookincubator/symphony/pkg/ent/locationtype"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
)

// FileCategoryTypeUpdate is the builder for updating FileCategoryType entities.
type FileCategoryTypeUpdate struct {
	config
	hooks    []Hook
	mutation *FileCategoryTypeMutation
}

// Where adds a new predicate for the builder.
func (fctu *FileCategoryTypeUpdate) Where(ps ...predicate.FileCategoryType) *FileCategoryTypeUpdate {
	fctu.mutation.predicates = append(fctu.mutation.predicates, ps...)
	return fctu
}

// SetName sets the name field.
func (fctu *FileCategoryTypeUpdate) SetName(s string) *FileCategoryTypeUpdate {
	fctu.mutation.SetName(s)
	return fctu
}

// SetLocationTypeID sets the location_type edge to LocationType by id.
func (fctu *FileCategoryTypeUpdate) SetLocationTypeID(id int) *FileCategoryTypeUpdate {
	fctu.mutation.SetLocationTypeID(id)
	return fctu
}

// SetNillableLocationTypeID sets the location_type edge to LocationType by id if the given value is not nil.
func (fctu *FileCategoryTypeUpdate) SetNillableLocationTypeID(id *int) *FileCategoryTypeUpdate {
	if id != nil {
		fctu = fctu.SetLocationTypeID(*id)
	}
	return fctu
}

// SetLocationType sets the location_type edge to LocationType.
func (fctu *FileCategoryTypeUpdate) SetLocationType(l *LocationType) *FileCategoryTypeUpdate {
	return fctu.SetLocationTypeID(l.ID)
}

// Mutation returns the FileCategoryTypeMutation object of the builder.
func (fctu *FileCategoryTypeUpdate) Mutation() *FileCategoryTypeMutation {
	return fctu.mutation
}

// ClearLocationType clears the "location_type" edge to type LocationType.
func (fctu *FileCategoryTypeUpdate) ClearLocationType() *FileCategoryTypeUpdate {
	fctu.mutation.ClearLocationType()
	return fctu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fctu *FileCategoryTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	fctu.defaults()
	if len(fctu.hooks) == 0 {
		affected, err = fctu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FileCategoryTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fctu.mutation = mutation
			affected, err = fctu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fctu.hooks) - 1; i >= 0; i-- {
			mut = fctu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fctu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fctu *FileCategoryTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := fctu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fctu *FileCategoryTypeUpdate) Exec(ctx context.Context) error {
	_, err := fctu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fctu *FileCategoryTypeUpdate) ExecX(ctx context.Context) {
	if err := fctu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fctu *FileCategoryTypeUpdate) defaults() {
	if _, ok := fctu.mutation.UpdateTime(); !ok {
		v := filecategorytype.UpdateDefaultUpdateTime()
		fctu.mutation.SetUpdateTime(v)
	}
}

func (fctu *FileCategoryTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   filecategorytype.Table,
			Columns: filecategorytype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: filecategorytype.FieldID,
			},
		},
	}
	if ps := fctu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fctu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: filecategorytype.FieldUpdateTime,
		})
	}
	if value, ok := fctu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: filecategorytype.FieldName,
		})
	}
	if fctu.mutation.LocationTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filecategorytype.LocationTypeTable,
			Columns: []string{filecategorytype.LocationTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: locationtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fctu.mutation.LocationTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filecategorytype.LocationTypeTable,
			Columns: []string{filecategorytype.LocationTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: locationtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fctu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filecategorytype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// FileCategoryTypeUpdateOne is the builder for updating a single FileCategoryType entity.
type FileCategoryTypeUpdateOne struct {
	config
	hooks    []Hook
	mutation *FileCategoryTypeMutation
}

// SetName sets the name field.
func (fctuo *FileCategoryTypeUpdateOne) SetName(s string) *FileCategoryTypeUpdateOne {
	fctuo.mutation.SetName(s)
	return fctuo
}

// SetLocationTypeID sets the location_type edge to LocationType by id.
func (fctuo *FileCategoryTypeUpdateOne) SetLocationTypeID(id int) *FileCategoryTypeUpdateOne {
	fctuo.mutation.SetLocationTypeID(id)
	return fctuo
}

// SetNillableLocationTypeID sets the location_type edge to LocationType by id if the given value is not nil.
func (fctuo *FileCategoryTypeUpdateOne) SetNillableLocationTypeID(id *int) *FileCategoryTypeUpdateOne {
	if id != nil {
		fctuo = fctuo.SetLocationTypeID(*id)
	}
	return fctuo
}

// SetLocationType sets the location_type edge to LocationType.
func (fctuo *FileCategoryTypeUpdateOne) SetLocationType(l *LocationType) *FileCategoryTypeUpdateOne {
	return fctuo.SetLocationTypeID(l.ID)
}

// Mutation returns the FileCategoryTypeMutation object of the builder.
func (fctuo *FileCategoryTypeUpdateOne) Mutation() *FileCategoryTypeMutation {
	return fctuo.mutation
}

// ClearLocationType clears the "location_type" edge to type LocationType.
func (fctuo *FileCategoryTypeUpdateOne) ClearLocationType() *FileCategoryTypeUpdateOne {
	fctuo.mutation.ClearLocationType()
	return fctuo
}

// Save executes the query and returns the updated entity.
func (fctuo *FileCategoryTypeUpdateOne) Save(ctx context.Context) (*FileCategoryType, error) {
	var (
		err  error
		node *FileCategoryType
	)
	fctuo.defaults()
	if len(fctuo.hooks) == 0 {
		node, err = fctuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FileCategoryTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fctuo.mutation = mutation
			node, err = fctuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fctuo.hooks) - 1; i >= 0; i-- {
			mut = fctuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fctuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fctuo *FileCategoryTypeUpdateOne) SaveX(ctx context.Context) *FileCategoryType {
	node, err := fctuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fctuo *FileCategoryTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := fctuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fctuo *FileCategoryTypeUpdateOne) ExecX(ctx context.Context) {
	if err := fctuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fctuo *FileCategoryTypeUpdateOne) defaults() {
	if _, ok := fctuo.mutation.UpdateTime(); !ok {
		v := filecategorytype.UpdateDefaultUpdateTime()
		fctuo.mutation.SetUpdateTime(v)
	}
}

func (fctuo *FileCategoryTypeUpdateOne) sqlSave(ctx context.Context) (_node *FileCategoryType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   filecategorytype.Table,
			Columns: filecategorytype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: filecategorytype.FieldID,
			},
		},
	}
	id, ok := fctuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing FileCategoryType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := fctuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: filecategorytype.FieldUpdateTime,
		})
	}
	if value, ok := fctuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: filecategorytype.FieldName,
		})
	}
	if fctuo.mutation.LocationTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filecategorytype.LocationTypeTable,
			Columns: []string{filecategorytype.LocationTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: locationtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fctuo.mutation.LocationTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filecategorytype.LocationTypeTable,
			Columns: []string{filecategorytype.LocationTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: locationtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FileCategoryType{config: fctuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, fctuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filecategorytype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
