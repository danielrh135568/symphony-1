// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package kqitarget

import (
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Frame applies equality check predicate on the "frame" field. It's identical to FrameEQ.
func Frame(v float64) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFrame), v))
	})
}

// AlowedValidation applies equality check predicate on the "alowedValidation" field. It's identical to AlowedValidationEQ.
func AlowedValidation(v float64) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlowedValidation), v))
	})
}

// InitTime applies equality check predicate on the "initTime" field. It's identical to InitTimeEQ.
func InitTime(v time.Time) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInitTime), v))
	})
}

// EndTime applies equality check predicate on the "endTime" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndTime), v))
	})
}

// Impact applies equality check predicate on the "impact" field. It's identical to ImpactEQ.
func Impact(v string) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImpact), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v bool) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.KqiTarget {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KqiTarget(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.KqiTarget {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KqiTarget(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.KqiTarget {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KqiTarget(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.KqiTarget {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KqiTarget(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.KqiTarget {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KqiTarget(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.KqiTarget {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KqiTarget(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// FrameEQ applies the EQ predicate on the "frame" field.
func FrameEQ(v float64) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFrame), v))
	})
}

// FrameNEQ applies the NEQ predicate on the "frame" field.
func FrameNEQ(v float64) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFrame), v))
	})
}

// FrameIn applies the In predicate on the "frame" field.
func FrameIn(vs ...float64) predicate.KqiTarget {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KqiTarget(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFrame), v...))
	})
}

// FrameNotIn applies the NotIn predicate on the "frame" field.
func FrameNotIn(vs ...float64) predicate.KqiTarget {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KqiTarget(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFrame), v...))
	})
}

// FrameGT applies the GT predicate on the "frame" field.
func FrameGT(v float64) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFrame), v))
	})
}

// FrameGTE applies the GTE predicate on the "frame" field.
func FrameGTE(v float64) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFrame), v))
	})
}

// FrameLT applies the LT predicate on the "frame" field.
func FrameLT(v float64) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFrame), v))
	})
}

// FrameLTE applies the LTE predicate on the "frame" field.
func FrameLTE(v float64) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFrame), v))
	})
}

// AlowedValidationEQ applies the EQ predicate on the "alowedValidation" field.
func AlowedValidationEQ(v float64) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlowedValidation), v))
	})
}

// AlowedValidationNEQ applies the NEQ predicate on the "alowedValidation" field.
func AlowedValidationNEQ(v float64) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAlowedValidation), v))
	})
}

// AlowedValidationIn applies the In predicate on the "alowedValidation" field.
func AlowedValidationIn(vs ...float64) predicate.KqiTarget {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KqiTarget(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAlowedValidation), v...))
	})
}

// AlowedValidationNotIn applies the NotIn predicate on the "alowedValidation" field.
func AlowedValidationNotIn(vs ...float64) predicate.KqiTarget {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KqiTarget(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAlowedValidation), v...))
	})
}

// AlowedValidationGT applies the GT predicate on the "alowedValidation" field.
func AlowedValidationGT(v float64) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAlowedValidation), v))
	})
}

// AlowedValidationGTE applies the GTE predicate on the "alowedValidation" field.
func AlowedValidationGTE(v float64) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAlowedValidation), v))
	})
}

// AlowedValidationLT applies the LT predicate on the "alowedValidation" field.
func AlowedValidationLT(v float64) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAlowedValidation), v))
	})
}

// AlowedValidationLTE applies the LTE predicate on the "alowedValidation" field.
func AlowedValidationLTE(v float64) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAlowedValidation), v))
	})
}

// InitTimeEQ applies the EQ predicate on the "initTime" field.
func InitTimeEQ(v time.Time) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInitTime), v))
	})
}

// InitTimeNEQ applies the NEQ predicate on the "initTime" field.
func InitTimeNEQ(v time.Time) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInitTime), v))
	})
}

// InitTimeIn applies the In predicate on the "initTime" field.
func InitTimeIn(vs ...time.Time) predicate.KqiTarget {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KqiTarget(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInitTime), v...))
	})
}

// InitTimeNotIn applies the NotIn predicate on the "initTime" field.
func InitTimeNotIn(vs ...time.Time) predicate.KqiTarget {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KqiTarget(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInitTime), v...))
	})
}

// InitTimeGT applies the GT predicate on the "initTime" field.
func InitTimeGT(v time.Time) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInitTime), v))
	})
}

// InitTimeGTE applies the GTE predicate on the "initTime" field.
func InitTimeGTE(v time.Time) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInitTime), v))
	})
}

// InitTimeLT applies the LT predicate on the "initTime" field.
func InitTimeLT(v time.Time) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInitTime), v))
	})
}

// InitTimeLTE applies the LTE predicate on the "initTime" field.
func InitTimeLTE(v time.Time) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInitTime), v))
	})
}

// EndTimeEQ applies the EQ predicate on the "endTime" field.
func EndTimeEQ(v time.Time) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndTime), v))
	})
}

// EndTimeNEQ applies the NEQ predicate on the "endTime" field.
func EndTimeNEQ(v time.Time) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndTime), v))
	})
}

// EndTimeIn applies the In predicate on the "endTime" field.
func EndTimeIn(vs ...time.Time) predicate.KqiTarget {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KqiTarget(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEndTime), v...))
	})
}

// EndTimeNotIn applies the NotIn predicate on the "endTime" field.
func EndTimeNotIn(vs ...time.Time) predicate.KqiTarget {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KqiTarget(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEndTime), v...))
	})
}

// EndTimeGT applies the GT predicate on the "endTime" field.
func EndTimeGT(v time.Time) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndTime), v))
	})
}

// EndTimeGTE applies the GTE predicate on the "endTime" field.
func EndTimeGTE(v time.Time) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndTime), v))
	})
}

// EndTimeLT applies the LT predicate on the "endTime" field.
func EndTimeLT(v time.Time) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndTime), v))
	})
}

// EndTimeLTE applies the LTE predicate on the "endTime" field.
func EndTimeLTE(v time.Time) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndTime), v))
	})
}

// ImpactEQ applies the EQ predicate on the "impact" field.
func ImpactEQ(v string) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImpact), v))
	})
}

// ImpactNEQ applies the NEQ predicate on the "impact" field.
func ImpactNEQ(v string) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldImpact), v))
	})
}

// ImpactIn applies the In predicate on the "impact" field.
func ImpactIn(vs ...string) predicate.KqiTarget {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KqiTarget(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldImpact), v...))
	})
}

// ImpactNotIn applies the NotIn predicate on the "impact" field.
func ImpactNotIn(vs ...string) predicate.KqiTarget {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KqiTarget(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldImpact), v...))
	})
}

// ImpactGT applies the GT predicate on the "impact" field.
func ImpactGT(v string) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldImpact), v))
	})
}

// ImpactGTE applies the GTE predicate on the "impact" field.
func ImpactGTE(v string) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldImpact), v))
	})
}

// ImpactLT applies the LT predicate on the "impact" field.
func ImpactLT(v string) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldImpact), v))
	})
}

// ImpactLTE applies the LTE predicate on the "impact" field.
func ImpactLTE(v string) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldImpact), v))
	})
}

// ImpactContains applies the Contains predicate on the "impact" field.
func ImpactContains(v string) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldImpact), v))
	})
}

// ImpactHasPrefix applies the HasPrefix predicate on the "impact" field.
func ImpactHasPrefix(v string) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldImpact), v))
	})
}

// ImpactHasSuffix applies the HasSuffix predicate on the "impact" field.
func ImpactHasSuffix(v string) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldImpact), v))
	})
}

// ImpactEqualFold applies the EqualFold predicate on the "impact" field.
func ImpactEqualFold(v string) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldImpact), v))
	})
}

// ImpactContainsFold applies the ContainsFold predicate on the "impact" field.
func ImpactContainsFold(v string) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldImpact), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v bool) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v bool) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// HasKqiTargetFk applies the HasEdge predicate on the "kqiTargetFk" edge.
func HasKqiTargetFk() predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(KqiTargetFkTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, KqiTargetFkTable, KqiTargetFkColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasKqiTargetFkWith applies the HasEdge predicate on the "kqiTargetFk" edge with a given conditions (other predicates).
func HasKqiTargetFkWith(preds ...predicate.Kqi) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(KqiTargetFkInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, KqiTargetFkTable, KqiTargetFkColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasKqitargetcomparatorfk applies the HasEdge predicate on the "kqitargetcomparatorfk" edge.
func HasKqitargetcomparatorfk() predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(KqitargetcomparatorfkTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, KqitargetcomparatorfkTable, KqitargetcomparatorfkColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasKqitargetcomparatorfkWith applies the HasEdge predicate on the "kqitargetcomparatorfk" edge with a given conditions (other predicates).
func HasKqitargetcomparatorfkWith(preds ...predicate.KqiComparator) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(KqitargetcomparatorfkInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, KqitargetcomparatorfkTable, KqitargetcomparatorfkColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.KqiTarget) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.KqiTarget) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.KqiTarget) predicate.KqiTarget {
	return predicate.KqiTarget(func(s *sql.Selector) {
		p(s.Not())
	})
}
